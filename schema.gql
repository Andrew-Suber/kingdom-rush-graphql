# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AttackSortDefinitionElement {
  column: AttackTowerColumn!
  sortOrder: SortOrder = ASCEND
}

type AttackTower {
  buildCost: Float!
  damageMaximum: Float!
  damageMinimum: Float!
  fireInterval: Float!
  id: Float!
  imageUrl: String!
  kingdom: TowerKingdom!
  level: TowerLevel!
  name: String!
  range: Float!
  towerType: TowerType!
}

enum AttackTowerColumn {
  buildCost
  damageMaximum
  damageMinimum
  fireInterval
  id
  kingdom
  level
  name
  range
  towerType
}

enum AttackTowerType {
  ARCHER
  ARTILLERY
  MAGE
}

input BarracksSortDefinitionElement {
  column: BarracksTowerColumn!
  sortOrder: SortOrder = ASCEND
}

type BarracksTower {
  armor: Float!
  buildCost: Float!
  damageMaximum: Float!
  damageMinimum: Float!
  health: Float!
  id: Float!
  imageUrl: String!
  kingdom: TowerKingdom!
  level: TowerLevel!
  name: String!
  numberOfUnits: Float!
  respawnInterval: Float!
  towerType: TowerType!
}

enum BarracksTowerColumn {
  armor
  buildCost
  damageMaximum
  damageMinimum
  health
  id
  kingdom
  level
  name
  numberOfUnits
  respawnInterval
}

type Query {
  attackTowers(onlyKingdoms: [TowerKingdom!] = [KR, KRF, KRO, KRV], onlyLevels: [TowerLevel!] = [LVL1, LVL2, LVL3, LVL4], onlyTowerTypes: [AttackTowerType!] = [ARCHER, ARTILLERY, MAGE], skip: Int = 0, sortDefinition: [AttackSortDefinitionElement!] = [{column: id}], take: Int = 104): [AttackTower!]!
  barracksTowers(onlyKingdoms: [TowerKingdom!] = [KR, KRF, KRO, KRV], onlyLevels: [TowerLevel!] = [LVL1, LVL2, LVL3, LVL4], skip: Int = 0, sortDefinition: [BarracksSortDefinitionElement!] = [{column: id}], take: Int = 104): [BarracksTower!]!
  towers(onlyKingdoms: [TowerKingdom!] = [KR, KRF, KRO, KRV], onlyLevels: [TowerLevel!] = [LVL1, LVL2, LVL3, LVL4], onlyTowerTypes: [TowerType!] = [BARRACKS, ARCHER, ARTILLERY, MAGE], skip: Int = 0, sortDefinition: [SortDefinitionElement!] = [{column: id, sortOrder: ASCEND}], take: Int = 104): [TowerWithStats!]!
}

input SortDefinitionElement {
  column: TowerColumn!
  sortOrder: SortOrder = ASCEND
}

enum SortOrder {
  ASCEND
  DESCEND
}

enum TowerColumn {
  buildCost
  damageMaximum
  damageMinimum
  id
  kingdom
  level
  name
  towerType
}

enum TowerKingdom {
  KR
  KRF
  KRO
  KRV
}

enum TowerLevel {
  LVL1
  LVL2
  LVL3
  LVL4
}

enum TowerType {
  ARCHER
  ARTILLERY
  BARRACKS
  MAGE
}

type TowerWithStats {
  buildCost: Float!
  damageMaximum: Float!
  damageMinimum: Float!
  id: Float!
  imageUrl: String!
  kingdom: TowerKingdom!
  level: TowerLevel!
  name: String!
  towerType: TowerType!
}
