# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Ability {
  abilityDescription: String!
  abilityId: Float!
  abilityName: String!
  kingdom: TowerKingdom!
  levelCosts: [Float!]!
  numberOfLevels: Float!
  totalAbilityCost: Float!
  totalCostWithTowers: Float!
  towerId: Float!
  towerImageUrl: String!
  towerName: String!
  towerType: TowerType!
}

enum AbilityColumn {
  abilityName
  kingdom
  totalCost
  totalCostWithTowers
  towerName
  towerType
}

input AbilitySortDefinitionElement {
  column: AbilityColumn!
  sortOrder: SortOrder = ASCEND
}

input AttackSortDefinitionElement {
  column: AttackTowerColumn!
  sortOrder: SortOrder = ASCEND
}

type AttackTower {
  buildCost: Float!
  damageMaximum: Float!
  damageMinimum: Float!
  fireInterval: Float!
  id: Float!
  imageUrl: String!
  kingdom: TowerKingdom!
  level: TowerLevel!
  name: String!
  range: Float!
  towerType: TowerType!
}

enum AttackTowerColumn {
  buildCost
  damageMaximum
  damageMinimum
  fireInterval
  id
  kingdom
  level
  name
  range
  towerType
}

enum AttackTowerType {
  ARCHER
  ARTILLERY
  MAGE
}

input BarracksSortDefinitionElement {
  column: BarracksTowerColumn!
  sortOrder: SortOrder = ASCEND
}

type BarracksTower {
  armor: Float!
  buildCost: Float!
  damageMaximum: Float!
  damageMinimum: Float!
  health: Float!
  id: Float!
  imageUrl: String!
  kingdom: TowerKingdom!
  level: TowerLevel!
  name: String!
  numberOfUnits: Float!
  respawnInterval: Float!
  towerType: TowerType!
}

enum BarracksTowerColumn {
  armor
  buildCost
  damageMaximum
  damageMinimum
  health
  id
  kingdom
  level
  name
  numberOfUnits
  respawnInterval
}

type BuildSequence {
  buildSequenceId: Float!
  kingdom: TowerKingdom!
  level1: BuildSequenceTower!
  level2: BuildSequenceTower!
  level3: BuildSequenceTower!
  level4: BuildSequenceTower!
  totalAbilitiesCost: Float!
  totalBuildCost: Float!
  totalBuildCostFullyUpgraded: Float!
  towerType: TowerType!
}

enum BuildSequenceColumn {
  kingdom
  totalAbilitiesCost
  totalBuildCost
  totalCostFullyUpgraded
  towerName
  towerType
}

input BuildSequenceSortDefinitionElement {
  column: BuildSequenceColumn!
  sortOrder: SortOrder = ASCEND
}

type BuildSequenceTower {
  buildCost: Float!
  id: Float!
  imageUrl: String!
  name: String!
}

type Query {
  abilities(onlyKingdoms: [TowerKingdom!] = [KR, KRF, KRO, KRV], onlyTowerTypes: [TowerType!] = [BARRACKS, ARCHER, ARTILLERY, MAGE], skip: Int = 0, sortDefinition: [AbilitySortDefinitionElement!] = [{column: towerName, sortOrder: ASCEND}, {column: abilityName, sortOrder: ASCEND}], take: Int = 104): [Ability!]!
  abilitiesByTowerId(id: Float!): [Ability!]!
  abilitiesByTowerName(name: String!): [Ability!]!
  abilityById(id: Float!): Ability
  abilityByName(name: String!): Ability
  attackTowers(onlyKingdoms: [TowerKingdom!] = [KR, KRF, KRO, KRV], onlyLevels: [TowerLevel!] = [LVL1, LVL2, LVL3, LVL4], onlyTowerTypes: [AttackTowerType!] = [ARCHER, ARTILLERY, MAGE], skip: Int = 0, sortDefinition: [AttackSortDefinitionElement!] = [{column: id, sortOrder: ASCEND}], take: Int = 104): [AttackTower!]!
  barracksTowers(onlyKingdoms: [TowerKingdom!] = [KR, KRF, KRO, KRV], onlyLevels: [TowerLevel!] = [LVL1, LVL2, LVL3, LVL4], skip: Int = 0, sortDefinition: [BarracksSortDefinitionElement!] = [{column: id, sortOrder: ASCEND}], take: Int = 104): [BarracksTower!]!
  buildSequenceById(id: Float!): BuildSequence
  buildSequenceByTowerId(id: Float!): BuildSequence
  buildSequenceByTowerName(name: String!): BuildSequence
  buildSequences(onlyKingdoms: [TowerKingdom!] = [KR, KRF, KRO, KRV], onlyTowerTypes: [TowerType!] = [BARRACKS, ARCHER, ARTILLERY, MAGE], skip: Int = 0, sortDefinition: [BuildSequenceSortDefinitionElement!] = [{column: kingdom, sortOrder: ASCEND}, {column: towerType, sortOrder: ASCEND}, {column: towerName, sortOrder: ASCEND}], take: Int = 104): [BuildSequence!]!
  towerById(id: Float!): TowerVerbose
  towers(onlyKingdoms: [TowerKingdom!] = [KR, KRF, KRO, KRV], onlyLevels: [TowerLevel!] = [LVL1, LVL2, LVL3, LVL4], onlyTowerTypes: [TowerType!] = [BARRACKS, ARCHER, ARTILLERY, MAGE], skip: Int = 0, sortDefinition: [SortDefinitionElement!] = [{column: id, sortOrder: ASCEND}], take: Int = 104): [TowerWithStats!]!
}

input SortDefinitionElement {
  column: TowerColumn!
  sortOrder: SortOrder = ASCEND
}

enum SortOrder {
  ASCEND
  DESCEND
}

enum TowerColumn {
  buildCost
  damageMaximum
  damageMinimum
  id
  kingdom
  level
  name
  towerType
}

enum TowerKingdom {
  KR
  KRF
  KRO
  KRV
}

enum TowerLevel {
  LVL1
  LVL2
  LVL3
  LVL4
}

enum TowerType {
  ARCHER
  ARTILLERY
  BARRACKS
  MAGE
}

type TowerVerbose {
  abilities: [Ability!]
  allStats: TowerWithNullableFields!
  buildSequence: BuildSequence
}

type TowerWithNullableFields {
  armor: Float
  buildCost: Float!
  damageMaximum: Float!
  damageMinimum: Float!
  fireInterval: Float
  health: Float
  id: Float!
  imageUrl: String!
  kingdom: TowerKingdom!
  level: TowerLevel!
  name: String!
  numberOfUnits: Float
  range: Float
  respawnInterval: Float
  towerType: TowerType!
}

type TowerWithStats {
  buildCost: Float!
  damageMaximum: Float!
  damageMinimum: Float!
  id: Float!
  imageUrl: String!
  kingdom: TowerKingdom!
  level: TowerLevel!
  name: String!
  towerType: TowerType!
}
